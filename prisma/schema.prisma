generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String?
  password            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  accounts            Account[]
  transactions        Transaction[]
  categorizationRules CategorizationRule[]  // ✅ fixed
}

model Account {
  id                String         @id @default(cuid())
  name              String
  type              String?
  currency          String?        @default("EUR")
  balance           Decimal?       @db.Decimal(12, 2)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  userId            String
  user              User           @relation(fields: [userId], references: [id])

  transactions      Transaction[]
  openingBalances   OpeningBalance[]
  ledgerLocks       LedgerLock[]
}

model Category {
  id                  String                @id @default(cuid())
  name                String
  color               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  transactions        Transaction[]
  categorizationRules CategorizationRule[]   // ✅ fixed
}

model Transaction {
  id                String          @id @default(cuid())
  date              DateTime
  description       String
  amount            Decimal         @db.Decimal(12, 2)
  type              String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  accountId         String
  account           Account         @relation(fields: [accountId], references: [id])

  categoryId        String?
  category          Category?       @relation(fields: [categoryId], references: [id])

  userId            String
  user              User            @relation(fields: [userId], references: [id])
}

model OpeningBalance {
  id                String     @id @default(cuid())
  accountId         String
  date              DateTime
  amount            Decimal    @db.Decimal(12, 2)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  account           Account    @relation(fields: [accountId], references: [id])
}

model LedgerLock {
  id                String     @id @default(cuid())
  accountId         String
  periodStart       DateTime
  periodEnd         DateTime
  lockedBy          String
  createdAt         DateTime   @default(now())

  account           Account    @relation(fields: [accountId], references: [id])
}

model CategorizationRule {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])

  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id])

  label         String
  pattern       String
  priority      Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}