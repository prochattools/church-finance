generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id                 String             @id @default(uuid())
  user_email         String             @unique
  sub_status         SubscriptionStatus @default(inactive)
  sub_type           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  last_stripe_cs_id  String             @unique
  stripe_customer_id String             @unique
  sub_stripe_id      String?
  user_clerk_id      String             @unique
}

model Project {
  id            String  @id @default(uuid())
  connection_id String
  webhook_id    String
  scenario_id   String
  assistant_id  String?
  user_clerk_id String
  type          String
  status        String  @default("default")

  webhookLink String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Audiences {
  id        String @id @default(uuid())
  resend_id String @unique
  name      String
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  createdAt    DateTime      @default(now())
  transactions Transaction[]
  ledgers      Ledger[]
}

model Category {
  id            String         @id @default(uuid())
  name          String         @unique
  color         String?
  createdAt     DateTime       @default(now())
  transactions  Transaction[]
}

model Ledger {
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  month        Int
  year         Int
  transactions Transaction[]
  createdAt    DateTime       @default(now())

  @@unique([userId, month, year])
}

model Transaction {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  ledgerId      String?
  ledger        Ledger?    @relation(fields: [ledgerId], references: [id])
  date          DateTime
  description   String
  normalizedKey String     @default("")
  amount        Float
  source        String
  categoryId    String?
  category      Category?  @relation(fields: [categoryId], references: [id])
  createdAt     DateTime   @default(now())

  @@index([userId, date])
  @@index([userId, normalizedKey, amount])
  @@unique([userId, date, amount, normalizedKey])
}

enum SubscriptionStatus {
  active
  inactive
}
